"""Renomear coluna nome_antigo para nome_novo

Revision ID: b1c66ec4d43e
Revises: 
Create Date: 2025-02-22 14:11:52.716495

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b1c66ec4d43e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('estoques_clientes')
    op.drop_table('tipos')
    op.drop_table('frascos')
    op.drop_table('clientes')
    op.drop_table('item_frasco')
    op.drop_table('historico_estoque')
    op.drop_table('solicitacoes')
    op.drop_table('estoque_empresa')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('estoque_empresa',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('id_frasco', sa.INTEGER(), nullable=False),
    sa.Column('quantidade', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['id_frasco'], ['frascos.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('solicitacoes',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('data_solicitacao', sa.DATETIME(), nullable=True),
    sa.Column('responsavel', sa.VARCHAR(length=254), nullable=False),
    sa.Column('assinatura', sa.BLOB(), nullable=False),
    sa.Column('id_cliente', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['id_cliente'], ['clientes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('historico_estoque',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('qtde', sa.INTEGER(), nullable=False),
    sa.Column('id_cliente', sa.INTEGER(), nullable=False),
    sa.Column('id_frasco', sa.INTEGER(), nullable=False),
    sa.Column('id_tipo', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['id_cliente'], ['clientes.id'], ),
    sa.ForeignKeyConstraint(['id_frasco'], ['frascos.id'], ),
    sa.ForeignKeyConstraint(['id_tipo'], ['tipos.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('item_frasco',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('quantidade', sa.INTEGER(), nullable=False),
    sa.Column('id_frasco', sa.INTEGER(), nullable=False),
    sa.Column('id_solicitacao', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['id_frasco'], ['frascos.id'], ),
    sa.ForeignKeyConstraint(['id_solicitacao'], ['solicitacoes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('clientes',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('identificacao', sa.VARCHAR(length=14), nullable=False),
    sa.Column('nome', sa.VARCHAR(length=254), nullable=False),
    sa.Column('telefone', sa.VARCHAR(length=11), nullable=True),
    sa.Column('email', sa.VARCHAR(length=254), nullable=True),
    sa.Column('status', sa.VARCHAR(length=7), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('identificacao')
    )
    op.create_table('frascos',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('nome', sa.VARCHAR(length=254), nullable=False),
    sa.Column('capacidade', sa.INTEGER(), nullable=False),
    sa.Column('descricao', sa.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tipos',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('nome', sa.VARCHAR(length=10), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('nome')
    )
    op.create_table('estoques_clientes',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('id_cliente', sa.INTEGER(), nullable=False),
    sa.Column('id_frasco', sa.INTEGER(), nullable=False),
    sa.Column('quantidade', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['id_cliente'], ['clientes.id'], ),
    sa.ForeignKeyConstraint(['id_frasco'], ['frascos.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###

from alembic import op

# Nome da tabela e colunas
tabela = "frascos"
coluna_antiga = "nome"
coluna_nova = "identificacao"

def upgrade():
    op.alter_column(tabela, coluna_antiga, new_column_name=coluna_nova)

def downgrade():
    op.alter_column(tabela, coluna_nova, new_column_name=coluna_antiga)

